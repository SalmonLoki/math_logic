import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Solver {
    private final String[] AND00 = new String[]{
            "((A)&(B))->(A)",
            "!(A)",
            "!(A)->(((A)&(B))->!(A))",
            "((A)&(B))->!(A)",
            "(((A)&(B))->(A))->((((A)&(B))->!(A))->!((A)&(B)))",
            "(((A)&(B))->!(A))->!((A)&(B))",
            "!((A)&(B))"};
    private final String[] AND01 = new String[]{
            "((A)&(B))->(A)",
            "!(A)->(((A)&(B))->!(A))",
            "!(A)",
            "((A)&(B))->!(A)",
            "(((A)&(B))->(A))->((((A)&(B))->!(A))->!((A)&(B)))",
            "(((A)&(B))->!(A))->!((A)&(B))",
            "!((A)&(B))"};
    private final String[] AND10 = new String[]{
            "((A)&(B))->(B)",
            "!(B)",
            "!(B)->(((A)&(B))->!(B))",
            "((A)&(B))->!(B)",
            "(((A)&(B))->(B))->((((A)&(B))->!(B))->!((A)&(B)))",
            "(((A)&(B))->!(B))->!((A)&(B))",
            "!((A)&(B))"};

    private final String[] AND11 = new String[]{
            "(A)",
            "(B)",
            "(A)->((B)->((A)&(B)))",
            "(B)->((A)&(B))",
            "(A)&(B)"
    };

    private final String[] AOrNotA = new String[]{
            "A->A|!A",
            "((A->(A|!A)))->((A->(A|!A)))->((A->(A|!A)))",
            "(((A->(A|!A)))->((A->(A|!A)))->((A->(A|!A))))->(((A->(A|!A)))->(((A->(A|!A)))->((A->(A|!A))))->((A->(A|!A))))->((A->(A|!A)))->((A->(A|!A)))",
            "(((A->(A|!A)))->(((A->(A|!A)))->((A->(A|!A))))->((A->(A|!A))))->((A->(A|!A)))->((A->(A|!A)))",
            "(((A->(A|!A)))->(((A->(A|!A)))->((A->(A|!A))))->((A->(A|!A))))",
            "((A->(A|!A)))->((A->(A|!A)))",
            "((A->(A|!A))->(A->!(A|!A))->!A)",
            "((A->(A|!A))->(A->!(A|!A))->!A)->((A->(A|!A)))->((A->(A|!A))->(A->!(A|!A))->!A)",
            "((A->(A|!A)))->((A->(A|!A))->(A->!(A|!A))->!A)",
            "(((A->(A|!A)))->(A->(A|!A)))->(((A->(A|!A)))->(A->(A|!A))->((A->!(A|!A))->!A))->((A->(A|!A)))->((A->!(A|!A))->!A)",
            "(((A->(A|!A)))->(A->(A|!A))->((A->!(A|!A))->!A))->((A->(A|!A)))->((A->!(A|!A))->!A)",
            "((A->(A|!A)))->((A->!(A|!A))->!A)",
            "((!(A|!A)->(A->!(A|!A)))->(!(A|!A)->(A->!(A|!A))->!A)->(!(A|!A)->!A))",
            "((!(A|!A)->(A->!(A|!A)))->(!(A|!A)->(A->!(A|!A))->!A)->(!(A|!A)->!A))->((A->(A|!A)))->((!(A|!A)->(A->!(A|!A)))->(!(A|!A)->(A->!(A|!A))->!A)->(!(A|!A)->!A))",
            "((A->(A|!A)))->((!(A|!A)->(A->!(A|!A)))->(!(A|!A)->(A->!(A|!A))->!A)->(!(A|!A)->!A))",
            "(!(A|!A)->A->!(A|!A))",
            "(!(A|!A)->A->!(A|!A))->((A->(A|!A)))->(!(A|!A)->A->!(A|!A))",
            "((A->(A|!A)))->(!(A|!A)->A->!(A|!A))",
            "(((A->(A|!A)))->(!(A|!A)->A->!(A|!A)))->(((A->(A|!A)))->(!(A|!A)->A->!(A|!A))->((!(A|!A)->(A->!(A|!A))->!A)->(!(A|!A)->!A)))->((A->(A|!A)))->((!(A|!A)->(A->!(A|!A))->!A)->(!(A|!A)->!A))",
            "(((A->(A|!A)))->(!(A|!A)->A->!(A|!A))->((!(A|!A)->(A->!(A|!A))->!A)->(!(A|!A)->!A)))->((A->(A|!A)))->((!(A|!A)->(A->!(A|!A))->!A)->(!(A|!A)->!A))",
            "((A->(A|!A)))->((!(A|!A)->(A->!(A|!A))->!A)->(!(A|!A)->!A))",
            "(((A->!(A|!A))->!A)->!(A|!A)->((A->!(A|!A))->!A))",
            "(((A->!(A|!A))->!A)->!(A|!A)->((A->!(A|!A))->!A))->((A->(A|!A)))->(((A->!(A|!A))->!A)->!(A|!A)->((A->!(A|!A))->!A))",
            "((A->(A|!A)))->(((A->!(A|!A))->!A)->!(A|!A)->((A->!(A|!A))->!A))",
            "(((A->(A|!A)))->((A->!(A|!A))->!A))->(((A->(A|!A)))->((A->!(A|!A))->!A)->(!(A|!A)->((A->!(A|!A))->!A)))->((A->(A|!A)))->(!(A|!A)->((A->!(A|!A))->!A))",
            "(((A->(A|!A)))->((A->!(A|!A))->!A)->(!(A|!A)->((A->!(A|!A))->!A)))->((A->(A|!A)))->(!(A|!A)->((A->!(A|!A))->!A))",
            "((A->(A|!A)))->(!(A|!A)->((A->!(A|!A))->!A))",
            "(((A->(A|!A)))->(!(A|!A)->((A->!(A|!A))->!A)))->(((A->(A|!A)))->(!(A|!A)->((A->!(A|!A))->!A))->(!(A|!A)->!A))->((A->(A|!A)))->(!(A|!A)->!A)",
            "(((A->(A|!A)))->(!(A|!A)->((A->!(A|!A))->!A))->(!(A|!A)->!A))->((A->(A|!A)))->(!(A|!A)->!A)",
            "((A->(A|!A)))->(!(A|!A)->!A)",
            "(A->A|!A)->(!(A|!A)->!A)",
            "!(A|!A)->!A",
            "!A->A|!A",
            "((!A->(A|!A)))->((!A->(A|!A)))->((!A->(A|!A)))",
            "(((!A->(A|!A)))->((!A->(A|!A)))->((!A->(A|!A))))->(((!A->(A|!A)))->(((!A->(A|!A)))->((!A->(A|!A))))->((!A->(A|!A))))->((!A->(A|!A)))->((!A->(A|!A)))",
            "(((!A->(A|!A)))->(((!A->(A|!A)))->((!A->(A|!A))))->((!A->(A|!A))))->((!A->(A|!A)))->((!A->(A|!A)))",
            "(((!A->(A|!A)))->(((!A->(A|!A)))->((!A->(A|!A))))->((!A->(A|!A))))",
            "((!A->(A|!A)))->((!A->(A|!A)))",
            "((!A->(A|!A))->(!A->!(A|!A))->!!A)",
            "((!A->(A|!A))->(!A->!(A|!A))->!!A)->((!A->(A|!A)))->((!A->(A|!A))->(!A->!(A|!A))->!!A)",
            "((!A->(A|!A)))->((!A->(A|!A))->(!A->!(A|!A))->!!A)",
            "(((!A->(A|!A)))->(!A->(A|!A)))->(((!A->(A|!A)))->(!A->(A|!A))->((!A->!(A|!A))->!!A))->((!A->(A|!A)))->((!A->!(A|!A))->!!A)",
            "(((!A->(A|!A)))->(!A->(A|!A))->((!A->!(A|!A))->!!A))->((!A->(A|!A)))->((!A->!(A|!A))->!!A)",
            "((!A->(A|!A)))->((!A->!(A|!A))->!!A)",
            "((!(A|!A)->(!A->!(A|!A)))->(!(A|!A)->(!A->!(A|!A))->!!A)->(!(A|!A)->!!A))",
            "((!(A|!A)->(!A->!(A|!A)))->(!(A|!A)->(!A->!(A|!A))->!!A)->(!(A|!A)->!!A))->((!A->(A|!A)))->((!(A|!A)->(!A->!(A|!A)))->(!(A|!A)->(!A->!(A|!A))->!!A)->(!(A|!A)->!!A))",
            "((!A->(A|!A)))->((!(A|!A)->(!A->!(A|!A)))->(!(A|!A)->(!A->!(A|!A))->!!A)->(!(A|!A)->!!A))",
            "(!(A|!A)->!A->!(A|!A))",
            "(!(A|!A)->!A->!(A|!A))->((!A->(A|!A)))->(!(A|!A)->!A->!(A|!A))",
            "((!A->(A|!A)))->(!(A|!A)->!A->!(A|!A))",
            "(((!A->(A|!A)))->(!(A|!A)->!A->!(A|!A)))->(((!A->(A|!A)))->(!(A|!A)->!A->!(A|!A))->((!(A|!A)->(!A->!(A|!A))->!!A)->(!(A|!A)->!!A)))->((!A->(A|!A)))->((!(A|!A)->(!A->!(A|!A))->!!A)->(!(A|!A)->!!A))",
            "(((!A->(A|!A)))->(!(A|!A)->!A->!(A|!A))->((!(A|!A)->(!A->!(A|!A))->!!A)->(!(A|!A)->!!A)))->((!A->(A|!A)))->((!(A|!A)->(!A->!(A|!A))->!!A)->(!(A|!A)->!!A))",
            "((!A->(A|!A)))->((!(A|!A)->(!A->!(A|!A))->!!A)->(!(A|!A)->!!A))",
            "(((!A->!(A|!A))->!!A)->!(A|!A)->((!A->!(A|!A))->!!A))",
            "(((!A->!(A|!A))->!!A)->!(A|!A)->((!A->!(A|!A))->!!A))->((!A->(A|!A)))->(((!A->!(A|!A))->!!A)->!(A|!A)->((!A->!(A|!A))->!!A))",
            "((!A->(A|!A)))->(((!A->!(A|!A))->!!A)->!(A|!A)->((!A->!(A|!A))->!!A))",
            "(((!A->(A|!A)))->((!A->!(A|!A))->!!A))->(((!A->(A|!A)))->((!A->!(A|!A))->!!A)->(!(A|!A)->((!A->!(A|!A))->!!A)))->((!A->(A|!A)))->(!(A|!A)->((!A->!(A|!A))->!!A))",
            "(((!A->(A|!A)))->((!A->!(A|!A))->!!A)->(!(A|!A)->((!A->!(A|!A))->!!A)))->((!A->(A|!A)))->(!(A|!A)->((!A->!(A|!A))->!!A))",
            "((!A->(A|!A)))->(!(A|!A)->((!A->!(A|!A))->!!A))",
            "(((!A->(A|!A)))->(!(A|!A)->((!A->!(A|!A))->!!A)))->(((!A->(A|!A)))->(!(A|!A)->((!A->!(A|!A))->!!A))->(!(A|!A)->!!A))->((!A->(A|!A)))->(!(A|!A)->!!A)",
            "(((!A->(A|!A)))->(!(A|!A)->((!A->!(A|!A))->!!A))->(!(A|!A)->!!A))->((!A->(A|!A)))->(!(A|!A)->!!A)",
            "((!A->(A|!A)))->(!(A|!A)->!!A)",
            "!(A|!A)->!!A",
            "(!(A|!A)->!A)->(!(A|!A)->!!A)->!!(A|!A)",
            "(!(A|!A)->!!A)->!!(A|!A)",
            "!!(A|!A)",
            "!!(A|!A)->A|!A",
            "A|!A"
    };

    private static final String[] imp00 = new String[]{
            "!(A)",
            "(!(A)->((A)->!(A)))",
            "((A)->!(A))",
            "!(B)",
            "(!(B)->((A)->!(B)))",
            "((A)->!(B))",
            "((A)->((A)->(A)))",
            "((A)->(((A)->(A))->(A)))",
            "(((A)->((A)->(A)))->(((A)->(((A)->(A))->(A)))->((A)->(A))))",
            "(((A)->(((A)->(A))->(A)))->((A)->(A)))",
            "((A)->(A))",
            "((!(B)->(A))->((!(B)->!(A))->!!(B)))",
            "(((!(B)->(A))->((!(B)->!(A))->!!(B)))->((A)->((!(B)->(A))->((!(B)->!(A))->!!(B)))))",
            "((A)->((!(B)->(A))->((!(B)->!(A))->!!(B))))",
            "((A)->(!(B)->(A)))",
            "(((A)->(!(B)->(A)))->((A)->((A)->(!(B)->(A)))))",
            "((A)->((A)->(!(B)->(A))))",
            "(((A)->(A))->(((A)->((A)->(!(B)->(A))))->((A)->(!(B)->(A)))))",
            "(((A)->((A)->(!(B)->(A))))->((A)->(!(B)->(A))))",
            "((A)->(!(B)->(A)))",
            "(!(A)->(!(B)->!(A)))",
            "((!(A)->(!(B)->!(A)))->((A)->(!(A)->(!(B)->!(A)))))",
            "((A)->(!(A)->(!(B)->!(A))))",
            "(((A)->!(A))->(((A)->(!(A)->(!(B)->!(A))))->((A)->(!(B)->!(A)))))",
            "(((A)->(!(A)->(!(B)->!(A))))->((A)->(!(B)->!(A))))",
            "((A)->(!(B)->!(A)))",
            "(((A)->(!(B)->(A)))->(((A)->((!(B)->(A))->((!(B)->!(A))->!!(B))))->((A)->((!(B)->!(A))->!!(B)))))",
            "(((A)->((!(B)->(A))->((!(B)->!(A))->!!(B))))->((A)->((!(B)->!(A))->!!(B))))",
            "((A)->((!(B)->!(A))->!!(B)))",
            "(((A)->(!(B)->!(A)))->(((A)->((!(B)->!(A))->!!(B)))->((A)->!!(B))))",
            "(((A)->((!(B)->!(A))->!!(B)))->((A)->!!(B)))",
            "((A)->!!(B))",
            "(!!(B)->(B))",
            "((!!(B)->(B))->((A)->(!!(B)->(B))))",
            "((A)->(!!(B)->(B)))",
            "(((A)->!!(B))->(((A)->(!!(B)->(B)))->((A)->(B))))",
            "(((A)->(!!(B)->(B)))->((A)->(B)))",
            "((A)->(B))"
    };
    private final static String[] imp01 = new String[]{

            "(B)->((A)->(B))",
            "(B)",
            "(A)->(B)"
    };
    private final static String[] imp10 = new String[]{
            "(A)",
            "!(B)",
            "!(B)->(((A)->(B))->!(B))",
            "((A)->(B))->!(B)",
            "((A)->(((A)->(B))->(A)))",
            "(((A)->(B))->(A))",
            "(((A)->(B))->(((A)->(B))->((A)->(B))))",
            "((((A)->(B))->(((A)->(B))->((A)->(B))))->((((A)->(B))->((((A)->(B))->((A)->(B)))->((A)->(B))))->(((A)->(B))->((A)->(B)))))",
            "((((A)->(B))->((((A)->(B))->((A)->(B)))->((A)->(B))))->(((A)->(B))->((A)->(B))))",
            "(((A)->(B))->((((A)->(B))->((A)->(B)))->((A)->(B))))",
            "(((A)->(B))->((A)->(B)))",
            "((((A)->(B))->(A))->((((A)->(B))->((A)->(B)))->(((A)->(B))->(B))))",
            "((((A)->(B))->((A)->(B)))->(((A)->(B))->(B)))",
            "(((A)->(B))->(B))",
            "(((A)->(B))->(B))->((((A)->(B))->!(B))->!((A)->(B)))",
            "(((A)->(B))->!(B))->!((A)->(B))",
            "!((A)->(B))"
    };
    private final static String[] imp11 = new String[]{

            "(B)",
            "(B)->((A)->(B))",
            "(A)->(B)"
    };

    private final static String[] not0 = new String[]{
            "!(A)"
    };
    private final static String[] not1 = new String[]{
            "(A)",
            "(A)->(!!!(A)->(A))",
            "!!!(A)->(A)",
            "!!!(A)->!(A)",
            "(!!!(A)->(A))->((!!!(A)->!(A))->!!!!(A))",
            "(!!!(A)->!(A))->!!!!(A)",
            "!!!!(A)",
            "!!!!(A)->!!(A)",
            "!!(A)"
    };
    private final static String[] or00 = new String[]{
            "!(A)",
            "!(B)",
            "(((A)|(B))->(A))->((((A)|(B))->!(A))->!((A)|(B)))",
            "!(A)->(((A)|(B))->!(A))",
            "((A)|(B))->!(A)",
            "!(A)",
            "(!(A)->(((A)|(B))->!(A)))",
            "(((A)|(B))->!(A))",
            "!(B)",
            "(!(B)->(((A)|(B))->!(B)))",
            "(((A)|(B))->!(B))",
            "(((A)|(B))->(((A)|(B))->((A)|(B))))",
            "(((A)|(B))->((((A)|(B))->((A)|(B)))->((A)|(B))))",
            "((((A)|(B))->(((A)|(B))->((A)|(B))))->((((A)|(B))->((((A)|(B))->((A)|(B)))->((A)|(B))))->(((A)|(B))->((A)|(B)))))",
            "((((A)|(B))->((((A)|(B))->((A)|(B)))->((A)|(B))))->(((A)|(B))->((A)|(B))))",
            "(((A)|(B))->((A)|(B)))",
            "((A)->((A)->(A)))",
            "(((A)->((A)->(A)))->(((A)|(B))->((A)->((A)->(A)))))",
            "(((A)|(B))->((A)->((A)->(A))))",
            "(((A)->((A)->(A)))->(((A)->(((A)->(A))->(A)))->((A)->(A))))",
            "((((A)->((A)->(A)))->(((A)->(((A)->(A))->(A)))->((A)->(A))))->(((A)|(B))->(((A)->((A)->(A)))->(((A)->(((A)->(A))->(A)))->((A)->(A))))))",
            "(((A)|(B))->(((A)->((A)->(A)))->(((A)->(((A)->(A))->(A)))->((A)->(A)))))",
            "((A)->(((A)->(A))->(A)))",
            "(((A)->(((A)->(A))->(A)))->(((A)|(B))->((A)->(((A)->(A))->(A)))))",
            "(((A)|(B))->((A)->(((A)->(A))->(A))))",
            "((((A)|(B))->((A)->((A)->(A))))->((((A)|(B))->(((A)->((A)->(A)))->(((A)->(((A)->(A))->(A)))->((A)->(A)))))->(((A)|(B))->(((A)->(((A)->(A))->(A)))->((A)->(A))))))",
            "((((A)|(B))->(((A)->((A)->(A)))->(((A)->(((A)->(A))->(A)))->((A)->(A)))))->(((A)|(B))->(((A)->(((A)->(A))->(A)))->((A)->(A)))))",
            "(((A)|(B))->(((A)->(((A)->(A))->(A)))->((A)->(A))))",
            "((((A)|(B))->((A)->(((A)->(A))->(A))))->((((A)|(B))->(((A)->(((A)->(A))->(A)))->((A)->(A))))->(((A)|(B))->((A)->(A)))))",
            "((((A)|(B))->(((A)->(((A)->(A))->(A)))->((A)->(A))))->(((A)|(B))->((A)->(A))))",
            "(((A)|(B))->((A)->(A)))",
            "!(B)",
            "(!(B)->(((A)|(B))->!(B)))",
            "(((A)|(B))->!(B))",
            "(!(B)->((B)->!(B)))",
            "((!(B)->((B)->!(B)))->(((A)|(B))->(!(B)->((B)->!(B)))))",
            "(((A)|(B))->(!(B)->((B)->!(B))))",
            "((((A)|(B))->!(B))->((((A)|(B))->(!(B)->((B)->!(B))))->(((A)|(B))->((B)->!(B)))))",
            "((((A)|(B))->(!(B)->((B)->!(B))))->(((A)|(B))->((B)->!(B))))",
            "(((A)|(B))->((B)->!(B)))",
            "!(A)",
            "(!(A)->(((A)|(B))->!(A)))",
            "(((A)|(B))->!(A))",
            "(!(A)->((B)->!(A)))",
            "((!(A)->((B)->!(A)))->(((A)|(B))->(!(A)->((B)->!(A)))))",
            "(((A)|(B))->(!(A)->((B)->!(A))))",
            "((((A)|(B))->!(A))->((((A)|(B))->(!(A)->((B)->!(A))))->(((A)|(B))->((B)->!(A)))))",
            "((((A)|(B))->(!(A)->((B)->!(A))))->(((A)|(B))->((B)->!(A))))",
            "(((A)|(B))->((B)->!(A)))",
            "((B)->((B)->(B)))",
            "(((B)->((B)->(B)))->(((A)|(B))->((B)->((B)->(B)))))",
            "(((A)|(B))->((B)->((B)->(B))))",
            "((B)->(((B)->(B))->(B)))",
            "(((B)->(((B)->(B))->(B)))->(((A)|(B))->((B)->(((B)->(B))->(B)))))",
            "(((A)|(B))->((B)->(((B)->(B))->(B))))",
            "(((B)->((B)->(B)))->(((B)->(((B)->(B))->(B)))->((B)->(B))))",
            "((((B)->((B)->(B)))->(((B)->(((B)->(B))->(B)))->((B)->(B))))->(((A)|(B))->(((B)->((B)->(B)))->(((B)->(((B)->(B))->(B)))->((B)->(B))))))",
            "(((A)|(B))->(((B)->((B)->(B)))->(((B)->(((B)->(B))->(B)))->((B)->(B)))))",
            "((((A)|(B))->((B)->((B)->(B))))->((((A)|(B))->(((B)->((B)->(B)))->(((B)->(((B)->(B))->(B)))->((B)->(B)))))->(((A)|(B))->(((B)->(((B)->(B))->(B)))->((B)->(B))))))",
            "((((A)|(B))->(((B)->((B)->(B)))->(((B)->(((B)->(B))->(B)))->((B)->(B)))))->(((A)|(B))->(((B)->(((B)->(B))->(B)))->((B)->(B)))))",
            "(((A)|(B))->(((B)->(((B)->(B))->(B)))->((B)->(B))))",
            "((((A)|(B))->((B)->(((B)->(B))->(B))))->((((A)|(B))->(((B)->(((B)->(B))->(B)))->((B)->(B))))->(((A)|(B))->((B)->(B)))))",
            "((((A)|(B))->(((B)->(((B)->(B))->(B)))->((B)->(B))))->(((A)|(B))->((B)->(B))))",
            "(((A)|(B))->((B)->(B)))",
            "((!(A)->(B))->((!(A)->!(B))->!!(A)))",
            "(((!(A)->(B))->((!(A)->!(B))->!!(A)))->(((A)|(B))->((!(A)->(B))->((!(A)->!(B))->!!(A)))))",
            "(((A)|(B))->((!(A)->(B))->((!(A)->!(B))->!!(A))))",
            "(((!(A)->(B))->((!(A)->!(B))->!!(A)))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A)))))",
            "((((!(A)->(B))->((!(A)->!(B))->!!(A)))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A)))))->(((A)|(B))->(((!(A)->(B))->((!(A)->!(B))->!!(A)))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A)))))))",
            "(((A)|(B))->(((!(A)->(B))->((!(A)->!(B))->!!(A)))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))))",
            "((((A)|(B))->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((((A)|(B))->(((!(A)->(B))->((!(A)->!(B))->!!(A)))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))))->(((A)|(B))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A)))))))",
            "((((A)|(B))->(((!(A)->(B))->((!(A)->!(B))->!!(A)))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))))->(((A)|(B))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))))",
            "(((A)|(B))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A)))))",
            "((B)->(!(A)->(B)))",
            "(((B)->(!(A)->(B)))->(((A)|(B))->((B)->(!(A)->(B)))))",
            "(((A)|(B))->((B)->(!(A)->(B))))",
            "(((B)->(!(A)->(B)))->((B)->((B)->(!(A)->(B)))))",
            "((((B)->(!(A)->(B)))->((B)->((B)->(!(A)->(B)))))->(((A)|(B))->(((B)->(!(A)->(B)))->((B)->((B)->(!(A)->(B)))))))",
            "(((A)|(B))->(((B)->(!(A)->(B)))->((B)->((B)->(!(A)->(B))))))",
            "((((A)|(B))->((B)->(!(A)->(B))))->((((A)|(B))->(((B)->(!(A)->(B)))->((B)->((B)->(!(A)->(B))))))->(((A)|(B))->((B)->((B)->(!(A)->(B)))))))",
            "((((A)|(B))->(((B)->(!(A)->(B)))->((B)->((B)->(!(A)->(B))))))->(((A)|(B))->((B)->((B)->(!(A)->(B))))))",
            "(((A)|(B))->((B)->((B)->(!(A)->(B)))))",
            "(((B)->(B))->(((B)->((B)->(!(A)->(B))))->((B)->(!(A)->(B)))))",
            "((((B)->(B))->(((B)->((B)->(!(A)->(B))))->((B)->(!(A)->(B)))))->(((A)|(B))->(((B)->(B))->(((B)->((B)->(!(A)->(B))))->((B)->(!(A)->(B)))))))",
            "(((A)|(B))->(((B)->(B))->(((B)->((B)->(!(A)->(B))))->((B)->(!(A)->(B))))))",
            "((((A)|(B))->((B)->(B)))->((((A)|(B))->(((B)->(B))->(((B)->((B)->(!(A)->(B))))->((B)->(!(A)->(B))))))->(((A)|(B))->(((B)->((B)->(!(A)->(B))))->((B)->(!(A)->(B)))))))",
            "((((A)|(B))->(((B)->(B))->(((B)->((B)->(!(A)->(B))))->((B)->(!(A)->(B))))))->(((A)|(B))->(((B)->((B)->(!(A)->(B))))->((B)->(!(A)->(B))))))",
            "(((A)|(B))->(((B)->((B)->(!(A)->(B))))->((B)->(!(A)->(B)))))",
            "((B)->(!(A)->(B)))",
            "(((B)->(!(A)->(B)))->(((A)|(B))->((B)->(!(A)->(B)))))",
            "(((A)|(B))->((B)->(!(A)->(B))))",
            "(!(B)->(!(A)->!(B)))",
            "((!(B)->(!(A)->!(B)))->(((A)|(B))->(!(B)->(!(A)->!(B)))))",
            "(((A)|(B))->(!(B)->(!(A)->!(B))))",
            "((!(B)->(!(A)->!(B)))->((B)->(!(B)->(!(A)->!(B)))))",
            "(((!(B)->(!(A)->!(B)))->((B)->(!(B)->(!(A)->!(B)))))->(((A)|(B))->((!(B)->(!(A)->!(B)))->((B)->(!(B)->(!(A)->!(B)))))))",
            "(((A)|(B))->((!(B)->(!(A)->!(B)))->((B)->(!(B)->(!(A)->!(B))))))",
            "((((A)|(B))->(!(B)->(!(A)->!(B))))->((((A)|(B))->((!(B)->(!(A)->!(B)))->((B)->(!(B)->(!(A)->!(B))))))->(((A)|(B))->((B)->(!(B)->(!(A)->!(B)))))))",
            "((((A)|(B))->((!(B)->(!(A)->!(B)))->((B)->(!(B)->(!(A)->!(B))))))->(((A)|(B))->((B)->(!(B)->(!(A)->!(B))))))",
            "(((A)|(B))->((B)->(!(B)->(!(A)->!(B)))))",
            "(((B)->!(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B)))))",
            "((((B)->!(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B)))))->(((A)|(B))->(((B)->!(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B)))))))",
            "(((A)|(B))->(((B)->!(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B))))))",
            "((((A)|(B))->((B)->!(B)))->((((A)|(B))->(((B)->!(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B))))))->(((A)|(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B)))))))",
            "((((A)|(B))->(((B)->!(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B))))))->(((A)|(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B))))))",
            "(((A)|(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B)))))",
            "((((A)|(B))->((B)->(!(B)->(!(A)->!(B)))))->((((A)|(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B)))))->(((A)|(B))->((B)->(!(A)->!(B))))))",
            "((((A)|(B))->(((B)->(!(B)->(!(A)->!(B))))->((B)->(!(A)->!(B)))))->(((A)|(B))->((B)->(!(A)->!(B)))))",
            "(((A)|(B))->((B)->(!(A)->!(B))))",
            "(((B)->(!(A)->(B)))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A)))))",
            "((((B)->(!(A)->(B)))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A)))))->(((A)|(B))->(((B)->(!(A)->(B)))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A)))))))",
            "(((A)|(B))->(((B)->(!(A)->(B)))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A))))))",
            "((((A)|(B))->((B)->(!(A)->(B))))->((((A)|(B))->(((B)->(!(A)->(B)))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A))))))->(((A)|(B))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A)))))))",
            "((((A)|(B))->(((B)->(!(A)->(B)))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A))))))->(((A)|(B))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A))))))",
            "(((A)|(B))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A)))))",
            "((((A)|(B))->((B)->((!(A)->(B))->((!(A)->!(B))->!!(A)))))->((((A)|(B))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A)))))->(((A)|(B))->((B)->((!(A)->!(B))->!!(A))))))",
            "((((A)|(B))->(((B)->((!(A)->(B))->((!(A)->!(B))->!!(A))))->((B)->((!(A)->!(B))->!!(A)))))->(((A)|(B))->((B)->((!(A)->!(B))->!!(A)))))",
            "(((A)|(B))->((B)->((!(A)->!(B))->!!(A))))",
            "(((B)->(!(A)->!(B)))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A))))",
            "((((B)->(!(A)->!(B)))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A))))->(((A)|(B))->(((B)->(!(A)->!(B)))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A))))))",
            "(((A)|(B))->(((B)->(!(A)->!(B)))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A)))))",
            "((((A)|(B))->((B)->(!(A)->!(B))))->((((A)|(B))->(((B)->(!(A)->!(B)))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A)))))->(((A)|(B))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A))))))",
            "((((A)|(B))->(((B)->(!(A)->!(B)))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A)))))->(((A)|(B))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A)))))",
            "(((A)|(B))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A))))",
            "((((A)|(B))->((B)->((!(A)->!(B))->!!(A))))->((((A)|(B))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A))))->(((A)|(B))->((B)->!!(A)))))",
            "((((A)|(B))->(((B)->((!(A)->!(B))->!!(A)))->((B)->!!(A))))->(((A)|(B))->((B)->!!(A))))",
            "(((A)|(B))->((B)->!!(A)))",
            "(!!(A)->(A))",
            "((!!(A)->(A))->(((A)|(B))->(!!(A)->(A))))",
            "(((A)|(B))->(!!(A)->(A)))",
            "((!!(A)->(A))->((B)->(!!(A)->(A))))",
            "(((!!(A)->(A))->((B)->(!!(A)->(A))))->(((A)|(B))->((!!(A)->(A))->((B)->(!!(A)->(A))))))",
            "(((A)|(B))->((!!(A)->(A))->((B)->(!!(A)->(A)))))",
            "((((A)|(B))->(!!(A)->(A)))->((((A)|(B))->((!!(A)->(A))->((B)->(!!(A)->(A)))))->(((A)|(B))->((B)->(!!(A)->(A))))))",
            "((((A)|(B))->((!!(A)->(A))->((B)->(!!(A)->(A)))))->(((A)|(B))->((B)->(!!(A)->(A)))))",
            "(((A)|(B))->((B)->(!!(A)->(A))))",
            "(((B)->!!(A))->(((B)->(!!(A)->(A)))->((B)->(A))))",
            "((((B)->!!(A))->(((B)->(!!(A)->(A)))->((B)->(A))))->(((A)|(B))->(((B)->!!(A))->(((B)->(!!(A)->(A)))->((B)->(A))))))",
            "(((A)|(B))->(((B)->!!(A))->(((B)->(!!(A)->(A)))->((B)->(A)))))",
            "((((A)|(B))->((B)->!!(A)))->((((A)|(B))->(((B)->!!(A))->(((B)->(!!(A)->(A)))->((B)->(A)))))->(((A)|(B))->(((B)->(!!(A)->(A)))->((B)->(A))))))",
            "((((A)|(B))->(((B)->!!(A))->(((B)->(!!(A)->(A)))->((B)->(A)))))->(((A)|(B))->(((B)->(!!(A)->(A)))->((B)->(A)))))",
            "(((A)|(B))->(((B)->(!!(A)->(A)))->((B)->(A))))",
            "((((A)|(B))->((B)->(!!(A)->(A))))->((((A)|(B))->(((B)->(!!(A)->(A)))->((B)->(A))))->(((A)|(B))->((B)->(A)))))",
            "((((A)|(B))->(((B)->(!!(A)->(A)))->((B)->(A))))->(((A)|(B))->((B)->(A))))",
            "(((A)|(B))->((B)->(A)))",
            "(((A)->(A))->(((B)->(A))->(((A)|(B))->(A))))",
            "((((A)->(A))->(((B)->(A))->(((A)|(B))->(A))))->(((A)|(B))->(((A)->(A))->(((B)->(A))->(((A)|(B))->(A))))))",
            "(((A)|(B))->(((A)->(A))->(((B)->(A))->(((A)|(B))->(A)))))",
            "((((A)|(B))->((A)->(A)))->((((A)|(B))->(((A)->(A))->(((B)->(A))->(((A)|(B))->(A)))))->(((A)|(B))->(((B)->(A))->(((A)|(B))->(A))))))",
            "((((A)|(B))->(((A)->(A))->(((B)->(A))->(((A)|(B))->(A)))))->(((A)|(B))->(((B)->(A))->(((A)|(B))->(A)))))",
            "(((A)|(B))->(((B)->(A))->(((A)|(B))->(A))))",
            "((((A)|(B))->((B)->(A)))->((((A)|(B))->(((B)->(A))->(((A)|(B))->(A))))->(((A)|(B))->(((A)|(B))->(A)))))",
            "((((A)|(B))->(((B)->(A))->(((A)|(B))->(A))))->(((A)|(B))->(((A)|(B))->(A))))",
            "(((A)|(B))->(((A)|(B))->(A)))",
            "((((A)|(B))->((A)|(B)))->((((A)|(B))->(((A)|(B))->(A)))->(((A)|(B))->(A))))",
            "((((A)|(B))->(((A)|(B))->(A)))->(((A)|(B))->(A)))",
            "(((A)|(B))->(A))",
            "(((A)|(B))->!(A))->!((A)|(B))",
            "!((A)|(B))"
    };
    private final static String[] or01 = new String[]{
            "(B)",
            "(B)->(A)|(B)",
            "(A)|(B)"
    };

    private final static String[] or10 = new String[]{
            "(A)",
            "(A)->((A)|(B))",
            "(A)|(B)"
    };
    private final static String[] or11 = new String[]{
            "(A)",
            "(A)->((A)|(B))",
            "(A)|(B)"
    };

    private Map<String, Boolean> badAnswer = new HashMap<>();
    List<String> variables = new ArrayList<>();
    Map<Character, List<String[]>> lemms = new HashMap<>();

    public List<List<String>> proof = new ArrayList<>();
    Deduction deduction = new Deduction();

    public Solver() {
        init(AND00, '&');
        init(AND01, '&');
        init(AND10, '&');
        init(AND11, '&');

        init(or00, '|');
        init(or01, '|');
        init(or10, '|');
        init(or11, '|');

        init(imp00, '-');
        init(imp01, '-');
        init(imp10, '-');
        init(imp11, '-');

        init(not0, '!');
        init(not1, '!');
    }

    private void init(String[] proof, Character operation) {
        if (!lemms.containsKey(operation)) {
            lemms.put(operation, new ArrayList<>());
        }
        List<String[]> temp = lemms.get(operation);
        temp.add(proof);
    }

    boolean checkBinOpeation(String s, boolean x, boolean y) {
        if (s.equals("&"))
            return x && y;
        if (s.equals("|"))
            return x || y;
        if (s.equals("->"))
            return !x || y;
        return !y;
    }

    boolean ff = false;
    int id = 0;

    public void check(Parser.Tree cur) {
        getVar(cur);
        ff = false;
        ff = checkOnFalse(cur);
    }

    private void getVar(Parser.Tree cur) {
        if (cur == null) {
            return;
        }
        if (cur.left == null && cur.right == null) {
            if (!badAnswer.containsKey(cur.sign)) {
                badAnswer.put(cur.sign, true);
                variables.add(cur.sign);
            }
            return;
        }
        getVar(cur.left);
        getVar(cur.right);
    }

    int numOfVar = 0;

    private boolean checkOnFalse(Parser.Tree cur) {
        int size = variables.size();

        for (int i = 0; i < 1 << size; i++) {
            for (int j = 0; j < size; j++)
                badAnswer.put(variables.get(size - j - 1), (i & (1 << j)) != 0);
            boolean f = getValue(cur, true);
            if (!f)
                return false;
        }


        for (int i = 0; i < 1 << size; i++) {
            StringBuilder context = new StringBuilder();

            for (int j = 0; j < size; j++) {
                badAnswer.put(variables.get(size - j - 1), (i & (1 << j)) != 0);
            }

            for (int j = 0; j < size; j++) {
                if (!badAnswer.get(variables.get(j))) {
                    context.append("!");
                }
                context.append(variables.get(j));
                if (j != size - 1) {
                    context.append(",");
                } else {
                    context.append("|-");
                }
            }
            context.append(cur.toString());
            proof.add(new ArrayList<>(1));
            proof.get(proof.size() - 1).add(context.toString());
            getValue(cur, false);

            numOfVar = 1;
            for (int j = 2; ((i + 1) & (j - 1)) == 0; j <<= 1) {
                merge(cur.toString());
                numOfVar++;
            }
        }
        return true;
    }

    private boolean getValue(Parser.Tree cur, boolean checkOn) {
        if (cur == null) {
            return false;
        }
        if (Character.isAlphabetic(cur.sign.charAt(0))) {
            return badAnswer.get(cur.sign);
        }
        boolean left = getValue(cur.left, checkOn);
        boolean right = getValue(cur.right, checkOn);
        if (!checkOn) {
            if (cur.sign.charAt(0) == '!') {
                applyLem('!', right ? 1 : 0, cur.right.toString(), "q");
            } else {
                applyLem(cur.sign.charAt(0), ((left ? 1 : 0) << 1) + (right ? 1 : 0), cur.left.toString(), cur.right.toString());
            }
        }
        return checkBinOpeation(cur.sign, left, right);
    }

    private void applyLem(Character binOp, int offset, String left, String right) {
        String[] curLem = lemms.get(binOp).get(offset);
        int lst = proof.size() - 1;
        modifiedString(curLem, proof.get(lst), left, right, proof.get(lst).size());
    }

    private void modifiedString(String[] from, List<String> to, String left, String right, int offset) {
        for (String aFrom : from) {
            StringBuilder line = new StringBuilder();
            for (int j = 0; j < aFrom.length(); j++) {
                if (aFrom.charAt(j) == 'A')
                    line.append("(").append(left).append(")");
                else if (aFrom.charAt(j) == 'B')
                    line.append("(").append(right).append(")");
                else
                    line.append(aFrom.charAt(j));
            }
            to.add(line.toString());
        }
    }

    private void merge(String resultStr) {
        int lst = proof.size() - 2;
        deduction.solve(proof.get(proof.size() - 1), false);
        proof.set(proof.size() - 1, deduction.result);
//        try(BufferedWriter out = new BufferedWriter(new FileWriter(new File("file" + (id++) + ".txt")))) {
//            for (String line : proof.get(proof.size() - 1)) {
//                out.write(line);
//                out.write("\n");
//            }
//        } catch (IOException e){
//        }

//        try(BufferedWriter out = new BufferedWriter(new FileWriter(new File("file" + (id++) + ".txt")))) {
//            for (String line : proof.get(lst)) {
//                out.write(line);
//                out.write("\n");
//            }
//        } catch (IOException e){
//        }
        deduction.solve(proof.get(lst), true);
        proof.set(lst, deduction.result);

//        try(BufferedWriter out = new BufferedWriter(new FileWriter(new File("file" + (id++) + ".txt")))) {
//            for (String line : proof.get(lst)) {
//                out.write(line);
//                out.write("\n");
//            }
//        } catch (IOException e){
//
//        }

        proof.get(lst).addAll(proof.get(proof.size() - 1));
        proof.remove(proof.size() - 1);

        String oldStr = proof.get(lst).get(0);
        StringBuilder newFirstString = new StringBuilder();
        for (int i = 0; i < oldStr.length(); i++) {
            if (oldStr.charAt(i) == '|' && oldStr.charAt(i + 1) == '-') {
                newFirstString.append(oldStr, 0, i + 2);
                newFirstString.append(resultStr);
                break;
            }
        }
        proof.get(proof.size() - 1).set(0, newFirstString.toString());

        int sizeBefore = proof.get(lst).size();
        String lastVarFromContext = variables.get(variables.size() - numOfVar);

        modifiedString(AOrNotA, proof.get(lst), lastVarFromContext, "q", sizeBefore);

        proof.get(lst).add("((" + lastVarFromContext + ")->(" + resultStr + "))->(!(" + lastVarFromContext + ")->(" + resultStr + "))->(((" + lastVarFromContext + ")|(!(" + lastVarFromContext + ")))->(" + resultStr + "))");
        proof.get(lst).add("(!(" + lastVarFromContext + ")->(" + resultStr + "))->(((" + lastVarFromContext + ")|(!(" + lastVarFromContext + ")))->(" + resultStr + "))");
        proof.get(lst).add("((" + lastVarFromContext + ")|(!(" + lastVarFromContext + ")))->(" + resultStr + ")");
        proof.get(lst).add(resultStr);

//        try(BufferedWriter out = new BufferedWriter(new FileWriter(new File("file" + (id++) + ".txt")))) {
//            for (String line : proof.get(lst)) {
//                out.write(line);
//                out.write("\n");
//            }
//        } catch (IOException e){
//
//        }

    }

    Parser p = new Parser();

    public void print(List<String> hyp, List<String> hypHelp) throws IOException {
        if (!ff) {
            System.out.print("Высказывание ложно при ");
            for (int i = 0; i < variables.size(); i++) {
                String it = variables.get(i);
                System.out.print(it);
                System.out.print("=");
                System.out.print(badAnswer.get(it) ? "И" : "Л");

                if (i != variables.size() - 1)
                    System.out.print(", ");
            }
        } else {
            StringBuilder firstLine = new StringBuilder();
            proof.get(0).set(0, "");
            for (int i = 0; i < hyp.size(); i++) {
                proof.get(0).add(p.parse(hyp.get(i)).toString());
                proof.get(0).add(p.parse(hypHelp.get(i)).toString());
                firstLine.append(p.parse(hyp.get(i)).toString());
                if (i != hyp.size() - 1) {
                    firstLine.append(',');
                }
            }
            firstLine.append("|-").append(p.parse(hypHelp.get(hypHelp.size() - 1)));
            proof.get(0).set(0, firstLine.toString());

            BufferedWriter out = new BufferedWriter(new FileWriter(new File("output.txt")));
            out.write(proof.get(0).get(0));
            out.write("\n");
            for (int i = 1; i < proof.get(0).size(); i++) {
                out.write(p.parse(proof.get(0).get(i)).toString());
                out.write("\n");
            }
            out.close();
        }
    }
}
